# Generated by Django 5.2.1

from django.db import migrations, models
from django.db.models import Count, Q
from django.utils import timezone


def dedupe_posconnections(apps, schema_editor):
    PosConnection = apps.get_model("integrations", "PosConnection")

    # provider + store_external_id 가 중복인 묶음 찾기
    dupes = (
        PosConnection.objects.values("provider_id", "store_external_id")
        .annotate(c=Count("id"))
        .filter(c__gt=1)
    )

    for d in dupes:
        # active 를 우선 1개만 살리고 나머지는 정리
        qs = PosConnection.objects.filter(
            provider_id=d["provider_id"], store_external_id=d["store_external_id"]
        ).order_by("-status", "-connected_at", "id")
        keep = None
        for obj in qs:
            if keep is None and obj.status == "active":
                keep = obj
                continue

            if obj.status == "active":
                obj.status = "disconnected"
                obj.disconnected_at = timezone.now()
                obj.reason = "auto_dedup"

            # 유니크 충돌 안 나도록 store_external_id 에 suffix 부여
            obj.store_external_id = f"{obj.store_external_id}__dup_{obj.pk}"
            obj.save(
                update_fields=[
                    "status",
                    "disconnected_at",
                    "reason",
                    "store_external_id",
                ]
            )


class Migration(migrations.Migration):

    dependencies = [
        ("integrations", "0009_posprovider_active_posprovider_auth_and_more"),
    ]

    operations = [
        migrations.RunSQL("DROP INDEX IF EXISTS uniq_active_pos_store_per_provider;"),
        migrations.RunSQL("DROP INDEX IF EXISTS pos_prov_store_idx;"),
        # (1) 필드 추가
        migrations.AddField(
            model_name="posconnection",
            name="disconnected_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="posconnection",
            name="reason",
            field=models.CharField(blank=True, default="", max_length=50),
        ),
        # (2) 이전 unique_together 제거 (있다면)
        migrations.AlterUniqueTogether(
            name="posconnection",
            unique_together=set(),
        ),
        # (3) 중복 데이터 정리
        migrations.RunPython(dedupe_posconnections, migrations.RunPython.noop),
        # (4) 인덱스 추가(있으면 OK)
        migrations.AddIndex(
            model_name="posconnection",
            index=models.Index(
                fields=["provider", "store_external_id"],
                name="pos_prov_store_idx",
            ),
        ),
        # (5)
        migrations.AddConstraint(
            model_name="posconnection",
            constraint=models.UniqueConstraint(
                fields=["provider", "store_external_id"],
                condition=Q(status="active"),
                name="uniq_active_pos_store_per_provider",
            ),
        ),
    ]
