"""
Django settings for MoPT_backend project.

Generated by 'django-admin startproject' using Django 4.0.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")  # .env 로드 (한 번만)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# 보안 키/디버그: main 쪽 정책 존중 → 환경변수 기반
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-secret")
DEBUG = os.getenv("DEBUG", "0") == "1"

ALLOWED_HOSTS = os.getenv(
    "DJANGO_ALLOWED_HOSTS", ".koyeb.app,localhost,127.0.0.1"
).split(",")

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "home",
    "ai_insights",
    "campaigns",
    "reports",
    "users",
    # 둘 다 살림: HEAD에서 추가된 DRF, main에서 추가된 integrations
    "rest_framework",
    "integrations",
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # main 쪽 유지: CSRF 활성화 (HEAD에서는 주석이었음)
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
ROOT_URLCONF = "MoPT_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "MoPT_backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
if os.getenv("DATABASE_URL"):
    DATABASES = {
        "default": dj_database_url.config(
            env="DATABASE_URL",
            conn_max_age=600,
            ssl_require=True,
        )
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
# USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----------------------------
# 공공데이터/외부 API 설정 (HEAD에서 추가된 항목) - 모두 유지
# ----------------------------
PUBLIC_API_BASE = os.getenv(
    "PUBLIC_API_BASE", "https://apis.data.go.kr/B553077/api/open/sdsc2"
)
PUBLIC_API_KEY = os.getenv("PUBLIC_API_KEY")  # Encoding Key 그대로
PUBLIC_API_TIMEOUT = float(os.getenv("PUBLIC_API_TIMEOUT", "6.0"))

LAWD_CODE_API_BASE = os.getenv(
    "LAWD_CODE_API_BASE", "https://api.odcloud.kr/api/15077871/v1"
)
LAWD_API_KEY = os.getenv("LAWD_API_KEY")  # Encoding Key 그대로
LAWD_API_TIMEOUT = float(os.getenv("LAWD_API_TIMEOUT", "6.0"))

# sdsc2 동코드 파라미터명(대부분 'key' 사용, 필요하면 'adm_cd' 등으로 교체)
SDSC_PARAM_KEY_NAME = os.getenv("SDSC_PARAM_KEY_NAME", "key")

# ----------------------------
# OAuth provider config (main에서 추가된 항목) - 그대로 유지
# ----------------------------
INTEGRATIONS_OAUTH = {
    "facebook": {
        "client_id": os.getenv("FB_CLIENT_ID", ""),
        "auth_base": "https://www.facebook.com/v20.0/dialog/oauth",
    },
    "instagram": {
        # Instagram Basic도 Facebook OAuth Dialog를 사용
        "client_id": os.getenv("FB_APP_CLIENT_ID_FOR_IG", ""),
        "auth_base": "https://www.facebook.com/v20.0/dialog/oauth",
    },
}

# Koyeb 프록시 뒤에서 https 처리
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True

# CSRF: Koyeb 도메인(필수), 로컬 개발용은 필요시 추가
CSRF_TRUSTED_ORIGINS = os.getenv(
    "DJANGO_CSRF_TRUSTED_ORIGINS", "https://*.koyeb.app"
).split(",")

# DEBUG=False(배포)에서만 해시/압축된 정적 파일 스토리지 사용
# 로컬 개발(DEBUG=True)에서는 생략해 개발 편의성 유지
if not DEBUG:  # ✅ 조건부 적용으로 로컬 개발시 충돌/불편 최소화
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
